name: 'Armbian/build'
author: 'Stefan Dej'
description: 'Armbian Linux build framework from amazingfate/armbian-compile-action'
inputs:
  configfile:
    description: 'Config file name'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Get more space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 30720
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'

    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        path: build-configs

    - name: Read configs
      id: config
      shell: bash
      run: |
        source ./build-configs/configs/config-default.conf
        source ./build-configs/configs/board-${{ inputs.configfile }}.conf
        
        echo "armbian_repository=${ARMBIAN_REPOSITORY}" >> $GITHUB_OUTPUT
        echo "armbian_branch=${ARMBIAN_BRANCH}" >> $GITHUB_OUTPUT
        
        echo "::set-output name=release::${RELEASE}"
        echo "::set-output name=branch::${BRANCH}"
        echo "::set-output name=build_desktop::${BUILD_DESKTOP}"
        echo "::set-output name=build_minimal::${BUILD_MINIMAL}"
        echo "::set-output name=kernel_only::${KERNEL_ONLY}"
        echo "::set-output name=kernel_configure::${KERNEL_CONFIGURE}"
        echo "::set-output name=bootfs_type::${BOOTFS_TYPE}"
        echo "::set-output name=compress_outputimage::${COMPRESS_OUTPUTIMAGE}"
        echo "::set-output name=repository_install::${REPOSITORY_INSTALL}"
        echo "::set-output name=no_apt_cacher::${NO_APT_CACHER}"
        echo "::set-output name=board::${BOARD}"
        
        echo "release=${RELEASE}" >> $GITHUB_ENV
        echo "branch=${BRANCH}" >> $GITHUB_ENV
        echo "build_desktop=${BUILD_DESKTOP}" >> $GITHUB_ENV
        echo "build_minimal=${BUILD_MINIMAL}" >> $GITHUB_ENV
        echo "kernel_only=${KERNEL_ONLY}" >> $GITHUB_ENV
        echo "kernel_configure=${KERNEL_CONFIGURE}" >> $GITHUB_ENV
        echo "bootfs_type=${BOOTFS_TYPE}" >> $GITHUB_ENV
        echo "compress_outputimage=${COMPRESS_OUTPUTIMAGE}" >> $GITHUB_ENV
        echo "repository_install=${REPOSITORY_INSTALL}" >> $GITHUB_ENV
        echo "no_apt_cacher=${NO_APT_CACHER}" >> $GITHUB_ENV
        echo "board=${BOARD}" >> $GITHUB_ENV

    - name: Checkout armbian Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        repository: ${{ steps.config.outputs.armbian_repository }}
        ref: ${{ steps.config.outputs.armbian_branch }}
        path: build

    - name: Build Image
      shell: bash
      run: |
        cd ./build
        sed -i -e 's/-it//g' ./config/templates/config-docker.conf
        docker_tag=$(cat VERSION|cut -d "-" -f1)
        docker_tag_in_repo=${docker_tag:0:5}
        docker pull ghcr.io/armbian/build:${docker_tag_in_repo}-amd64
        docker image tag ghcr.io/armbian/build:${docker_tag_in_repo}-amd64 armbian:$(cat VERSION)
        ./compile.sh docker \
          BOARD="${{ env.board }}" \
          RELEASE="${{ env.release }}" \
          BRANCH="${{ env.branch }}" \
          BUILD_DESKTOP="${{ env.build_desktop }}" \
          BUILD_MINIMAL="${{ env.build_minimal }}" \
          KERNEL_ONLY="${{ env.kernel_only }}" \
          KERNEL_CONFIGURE="${{ env.kernel_configure }}" \
          BOOTFS_TYPE="${{ env.bootfs_type }}"\
          COMPRESS_OUTPUTIMAGE="${{ env.compress_outputimage }}" \
          REPOSITORY_INSTALL="${{ env.repository_install }}"
